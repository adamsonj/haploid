# -*-mode:org; org-todo-keywords: '((sequence "todo" "done"))-*-
# file:line author email date
# Copyright 2010 Joel J. Adamson
# $Id$
* done recomb.c:194 Joel James Adamson  <adamsonj@email.unc.edu> <2009-12-28 Mon> :CLOSED:
  - local zyg contains only 0 as its index (is this wrong?) when
    running tlta: i.e. every entry is 0
  - therefore we just add to the first entry of rec_table
  - of course, this produces a segfault
  - the problem appears to be in zygote_genotypes (): this function
    doesn't do _anything_ as of now;  I may have misunderstood what
    this function is supposed to do

** Solution
   - Instead of a single pointer, use a 2D array of pointers: each
     element of the array is an array (passed as a pointer), and under
     each (i,j) pair we can deal with a single array and index it.
   - Other helpful things:
     1. If i == j, the array is all zero except for array[0] = 1.  All
	we need is 1 such pointer, and we can use the same one for every
	[i,i] entry
     2. all we need is the "upper triangle" of the rec_table (j < i).
        Since this is haploid, there is no parent-of-origin effect, so
        we can just use the other rec_table[j,i] = rec_table[i,j]
        (where rec_table[i,j] is a pointer to the array in the
        [i,j]-th position of rec_table) when j > i in the first case.
        We have thus eliminated half the calculation!
   - we still need the same algorithm of calculating the index and
     placing the probability there;
** Algorithm
   1. Loop over mothers (i from 0 to GENO)
      - Loop over fathers 
	+ if (i == j) then set the current entry to point to zygii =
          {1,0,0,...,0}
	+ if (j > i)
	  * else loop over recombination masks, determining the genotype
	    from each potential recombination mask, adding the
	    probability to the entry in that position
	    1. each recombination mask yields two recombinant genotypes
	    2. plus each parental (non-recombinant) genotype
	    3. this makes an array of four genotypes: e.g. zygotes =
	       {0010,0100,0000,0110}.  Then we fill rec_table[2,4] with
	       { r/2, 0, (1-r)/2, 0, (1-r)/2, r/2}.
	+ if (j < i) rec_table[j,i] = rec_table[i,j]
   2. Do a consistency check --- nothing should be over 1.0.  Should
      this be built in to the program?  No.  Do it in the debugger
* done tlta.c Joel James Adamson  <adamsonj@email.unc.edu> <2009-12-31 Thu> :CLOSED:
  - returns from main () after one run
  - *should* test with another initial condition 
* done tlta.c  Joel James Adamson  <adamsonj@email.unc.edu> <2010-01-01 Fri> :CLOSED:
  - funny return values from degenerate cases
  - these corners should be equilibrium values, but they change after
    a single step
  - isolated to recombination
    + probably due to the INCORRECT specification of rec_table in set_rec_table
    + rec_table should be global as well; declaring it within next_gen
      means it is calculated every time; this is hugely wasteful
* done ./haplib Joel James Adamson  <adamsonj@email.unc.edu> <2010-01-03 Sun> :CLOSED:
  Library functions need runtime array dimensions
* done haplib.h:39 "Joel J. Adamson" <adamsonj@email.unc.edu><2010-01-19 10:24 > :CLOSED:
`#include "bithacks.h"' should use brackets instead of quotation marks
* done Makefile.am "Joel J. Adamson" <adamsonj@email.unc.edu><2010-01-19 10:24 > :CLOSED:
do not use INCLUDE as per Automake manual


Version: trunk
* done configure.ac "Joel J. Adamson" <adamsonj@email.unc.edu><2010-01-19 10:25 > :CLOSED:

bug report email address should be haploid-bugs@unc.edu
* done Makefile.am "Joel J. Adamson" <adamsonj@email.unc.edu><2010-01-19 10:25 > :CLOSED:

Use AM_LDFLAGS instead of LDADD


Version: trunk

Filed by: Joel James Adamson <adamsonj@email.unc.edu>
** Change not made
   This change was not completed because it causes a weird error and
   seems unnecessary, i.e. having LDADD instead of AM_LDFLAGS doesn't
   cause any actual problems
* done recomb.c "Joel J. Adamson" <adamsonj@email.unc.edu><2010-02-05 11:26 >

Two loci, r=0.15:
00011 X 00011:0.150  0.000  0.000  1.000  

Three loci, r = { 0.15, 0.1 }:
00011 X 00101:0.000  0.050  -nan   0.450  0.000  0.450  0.000  -nan   
00011 X 00101:0.000  0.050  -nan   0.450  0.000  0.450  0.000  -nan   
00100 X 00001:0.110  0.390  0.000  0.000  -nan   0.110  0.000  0.000  
00100 X 00010:0.050  -nan   0.450  0.000  0.450  0.000  0.050  0.000  
00100 X 00110:0.000  0.000  -0.00  0.000  -nan   0.000  0.500  0.000  
00100 X 00111:0.000  -nan   0.000  0.000  0.425  0.075  0.075  0.425  
00101 X 00010:0.007  0.042  0.382  0.067  0.067  0.382  -nan   0.007  
00101 X 00011:0.000  0.050  0.000  -nan   0.000  0.450  0.000  0.050  
00101 X 00100:0.000  -nan   0.000  0.000  0.500  0.500  0.000  0.000  
00101 X 00111:0.000  0.000  0.000  0.000  -nan   0.500  0.000  0.500  
00110 X 00000:0.450  -nan   0.050  -0.00  0.050  0.000  0.450  0.000  
00110 X 00100:-nan   0.000  0.000  0.000  0.500  0.000  0.500  0.000  
00110 X 00111:0.000  0.000  2.500  0.000  0.000  0.000  0.500  0.500  
00111 X 00100:0.000  0.000  0.000  0.000  23158  0.075  0.075  0.425  

There are three types of incorrect values:
1) those that should be zero and are non-zero (e.g. Table 2, row 6,
column 2)
2) those are within range but the wrong values (e.g. nan or -nan instead
of 0.5: Table 2, row 3, column 5)

Potential trouble spots are
1) recomb.c:48 (rec_prob ())
2) recomb.c:104: if zyg[i] is greater than geno, we've got a problem
(zygote_genotypes ())
3) recomb.c:110: if double * r is not of the right dimensions, or
contains junk, we will get junk out of set_rec_table ()


Version: : trunk
Filed by: Joel James Adamson <adamsonj@email.unc.edu>
* done src/debug.c: 63 "Joel J. Adamson" <adamsonj@email.unc.edu><2010-02-05 11:01 > :CLOSED:


This string should not be of limited size; we should use as much
precision as the user demands (perhaps %9.8g would do it).


Version: : trunk
Filed by: Joel James Adamson <adamsonj@email.unc.edu>
* done recomb.c "Joel J. Adamson" <adamsonj@email.unc.edu><2010-02-16 09:51 >

set_rec_table should use a hash table hashed by some function of the
parents and offspring.  This could reduce searching by many orders of
magnitude.  Consider especially that most of the recombination table
will be zeroes, it makes no sense to actually store those anywhere.
** Counterpoint
   - Is this really any faster than just iterating over the whole table?
   - can we really describe this as a search?
   - hash tables are for searching, so does a hash-table-based
     implementation make sense
** Outside opinions
   - Suja Thomas
     + the most expensive thing is a for loop that iterates over
       values you know will be useless
     + you will run into a space constraint before a time constraint
     + try to identify the masks/loci where you can rule out
       particular offspring
   - Toby Clarke
     + as long as things are known at compile-time there should be
       little speedup from changing the algorithm

Version: : trunk
Filed by: Joel James Adamson <adamsonj@email.unc.edu>
** Outside algorithms
   - http://dx.doi.org/10.1016/j.tpb.2010.03.003
     + collaborate with this guy?
     + read the article
     + if he wants to be a part of it, and it's suitable, then invite
       him to help me make the project free software
     + if he doesn't care, and the algorithm is useful, it's
       published, so use it anyway

* done geno_func.c:33 Joel J Adamson <adamsonj@email.unc.edu><2010-03-12 16:28 >

This file still sources bithacks.h, and still uses its functions!


Version: : 0.13
Filed by: Joel James Adamson <adamsonj@email.unc.edu>
* done sparse.c:150 "Joel J. Adamson" <adamsonj@email.unc.edu><2010-04-15 16:37 >
sparse_mat_mat_kron causes a segfault when iterating over sparse_elt_t
pointers.  Segfault is at the top of the loop, in the test sparseptr->
!= NULL; accessing sparseptr here causes segfault (i.e. accessing
sparseptr->next is asking for a value that doesn't exist).  


Version: : 0.2
Filed by: Joel James Adamson <adamsonj@email.unc.edu>

** Backtrace:

   Program received signal SIGSEGV, Segmentation fault.
   0x00007ffff7ddf904 in sparse_mat_mat_kron (len=8, dense=0x603690, sparse=0x21) at src/sparse.c:150
   Missing separate debuginfos, use: debuginfo-install glibc-2.11.1-1.x86_64 libgomp-4.4.3-4.fc12.x86_64
   Breakpoint 1 at 0x7ffff7ddf844: file src/sparse.c, line 150.
   (gdb) bt
#0  0x00007ffff7ddf904 in sparse_mat_mat_kron (len=8, dense=0x603690, sparse=0x21) at src/sparse.c:150
#1  0x00007ffff7ddf0e0 in rec_mating (data=0x603050) at src/rec.c:166
#2  0x00000000004019cc in age_dep_iterate (data=0x603010, tries=1) at age_dep.c:268
#3  0x00000000004014ce in main (argc=3, argv=0x7fffffffe498) at age_dep.c:92
   (gdb) 

** Solved:
   rewrote as a while loop with proper assignments
