\input texinfo                  @c -*-texinfo-*-
@comment $Id$
@comment %**start of header
@setfilename haploid.info
@include version.texi
@settitle Numerical Library for Haploid Genetics 
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for Haploid (version @value{VERSION}, @value{UPDATED}), a
C library for haploid population genetic simulations.

Copyright @copyright{} 2009 Joel J. Adamson

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to
copy and modify this GNU manual.''
@end quotation
@end copying

@dircategory Libraries
@direntry
* Haploid: (haploid). Numerical Library for Haploid Genetics.
@end direntry

@titlepage
@title  Numerical Library for Haploid Genetics
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Joel J. Adamson (@email{adamsonj@@email.unc.edu})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Numerical Library for Haploid Genetics

This manual covers Haploid (version @value{VERSION}, @value{UPDATED}), a
C library for haploid population genetic simulations.

@menu
* Introduction::                
* Features::                    
* Representation::              
* Simulation functions::        
* GNU Free Documentation License::  
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Development::                 

Features

* Recombination tables::        
* Mating tables::               
* Recombination algorithm::     

Representation

* Genotypes::                   
* Compound Objects::            

Genotypes

* Working with genome size::    
* Manipulating Genotypes::      
* Genotype functions::          

@end detailmenu
@end menu

@end ifnottex

@comment  node-name,  next,  previous,  up
@node Introduction, Features, Top, Top
@chapter Introduction
Haploid is a library of C functions useful for simulating haploid
population genetics.  Haploid simulations are often used for theoretical
studies of sexual selection, migration and speciation.

@cindex developing Haploid
@cindex Subversion, using
Haploid follows the GNU Coding Standards (with some exceptions) and is
managed by the GNU Autotools in a @url{http://subversion.tigris.org,
Subversion} version control repository hosted on
@url{http://savannah.nongnu.org/projects/haploid, Savannah}.

To use the library, use @code{#include <haploid.h>} at the top of your
files.  To link with the library, pass @code{-lhaploid} to the linker.
For example:
@cindex compiling
@example
# gcc -std=gnu99 -ggdb  -g -O2   -o sim_stop sim_stop.o -lm -lhaploid 
@end example

Haploid is Free Software released under the terms of the GNU General
Public License Version 3.
@cindex bug reports, submit
@cindex bugs
@cindex reporting bugs
Send bug reports or questions on usage to the mailing list at
@email{haploid-users@@nongnu.org}).

@menu
* Development::                 
@end menu

@node Development,  , Introduction, Introduction
@section Development

@comment Some details of developing Haploid.
@cindex development, standards
@cindex GNU Coding Standards
Please read the GNU Coding Standards before adding any code to Haploid
or developing a test. @xref{Writing C, Writing C, Writing C, standards,
GNU Coding Standards}, for details of GNU style.  Haploid makes use of
extensions in the GNU C Library and the C99 Standard.  I also highly
recommend using GCC for compiling the library, as some library functions
are merely wrappers for built-in functions available in GCC.

Patches are welcomed for testing.  The best way to make a patch from
your working copy is with the command
@cindex diff
@cindex patch
@example
# svn diff -x -u <filename> > PATCHFILE
@end example

Such a diff contains enough information for @command{patch} to apply it
with
@cindex patch, applying a
@example
# patch -p0 < PATCHFILE
@end example

@node Features, Representation, Introduction, Top
@chapter Features

Haploid uses two interesting features to simulate evolution of allele
frequencies.  The first is the representation of recombination tables as
arrays of sparse matrices (one sparse matrix for each possible offspring
in a given genome).  Only the offspring that are possible with a given
set of parents take up storage space in this representation.  Any zero
entries (for ``impossible offspring'') are not stored, and are
represented only as gaps in the indices of the entries in the table.
For small recombination frequencies, and large genomes, this reduces the
use of space for the lookup table, and potentially reduces the amount of
time taken to calculate offspring frequencies.

The second feature is the algorithm that produces recombination tables
for arbitrary recombination frequencies (specified as arrays).  The
algorithm avoids calculating probabilities as much as possible and only
calculates them when they are not 1.0 or 0.0.

When a single recombination scheme is needed for a particular problem,
the lookup table need only be calculated once (at the beginning of the
simulation).  However, I believe the algorithm is fast enough that you
could use it to represent evolving recombination.  Please inform the
developers if you successfully use the library for this purpose.
@cindex diploid, simulating diploidy
@cindex diploidy, simulating
Haploid's name may be deceiving: the real heart of the library is the
recombination algorithm, for which we only need haploid genetics.
However, one could adapt the algorithms for simulating diploid
populations.
@c how would you do this?  Provide an example!

@menu
* Recombination tables::        
* Mating tables::               
* Recombination algorithm::     
@end menu

@node Recombination tables, Mating tables, Features, Features
@section Recombination tables
@cindex recombination
@cindex recombination, tables
@cindex recombination, rates

Recombination tables are three-dimensional arrays that define the
probability of an offspring genotype given two parents.  We can think of
the recombination table as an array of matrices wherein each matrix
defines holds the probabilities of an offspring genotype.  Each column
in the matrix defines one parent (e.g. the father) and the row defines
the other parent (e.g. the mother).

The algorithm that builds the table exploits a few conspicuous features:
the diagonal of this table is entirely zero, except for the entry where
both parents are the same genotype as the offspring.  When the parents
are identical, they will only produce the desired offspring when they
are that genotype themselves (and it is the only genotype they will
produce).  The matrix is symmetric about this diagonal, since we
generally assume that recombination is unaffected by the parent of
origin.

For example, with two loci and two alleles, the recombination table for
producing the offspring 0 (@code{0x0}) with @math{r = 0.5} is:

@verbatim
1.00000000 0.50000000 0.50000000 0.25000000 
0.50000000 0.00000000 0.25000000 0.00000000 
0.50000000 0.25000000 0.00000000 0.00000000 
0.25000000 0.00000000 0.00000000 0.00000000 
@end verbatim

and the whole array includes four such tables.  As you can see the table
is mostly @math{0}.  For this purpose we store the matrices as linked
lists where each link is a C structure containing the value, the indices
and a pointer to the next link in the chain.

This strategy is nifty, but it's not exposed to the user, as the only
function for accessing recombination table data is rec_mating () which
produces the offspring genotype frequencies given a mating table.  You
may be able to use this data structure to your advantage, but its
implementation is hidden from the user.

@node Mating tables, Recombination algorithm, Recombination tables, Features
@section Mating tables
@cindex mating table
@cindex sexual selection
@cindex non-random mating
@cindex mating, non-random
@cindex mating, random
@cindex mating, selective
A ``mating table'' is a matrix where the rows are defined to be one
parent (e.g. the mother) and the columns represent the other parent, and
entries represent the probability of mating.  For example, if you were
simulating sexual selection each entry would be the male frequency times
the female frequency times the probability of mating given an encounter.
You can simulate random mating by making the entries of the mating table
equal to the products of the male and female frequencies.

@code{rec_mating ()} calculates new offspring frequencies by finding the
Kronecker (or ``direct'') product of the mating table and the
recombination table entry for a particular offspring and summing the
entries of the result.  Before returning the vector of offspring
probabilities @code{rec_mating ()} divides each new frequency by the
total of the new frequencies.

@node Recombination algorithm,  , Mating tables, Features
@section Recombination algorithm
@cindex recombination, algorithm
Haploid's second feature is the algorithm that calculates the entries of
the recombination table.  The algorithm for choosing to make an entry is
contained in a loop-nest within the function @code{rec_gen_table ()}, in
the file @file{src/rec.c}.  This explanation is just an aid in reading
the source code: users only need to call @code{rec_gen_table ()} with
appropriate arguments.

The algorithm loops over the possible offspring, from 0 to the number of
given genotypes minus one; then the algorithm loops over mothers and
then fathers (arbitrarily designated).  First the algorithm checks if
there is already an entry in the table for transposed parents, if so it
makes a new entry with the same value.  The result is symmetry, which
corresponds to no bias in recombination based on parent of origin.  If
the mother, father and offspring all have the same genotype, then there
is only one possible offspring, and a new entry is made with a value of
1.  Further (or prior) loops with equal parent genotypes will produce no
entries (corresponding to the value zero).  

If one parent matches the offspring, and recombination can possibly
produce the target offspring, then the value of the new entry is
@math{0.5}.  If recombination is not possible (i.e. any recombination
will produce non-target offspring) then the probability of the target
offspring is the probability of no recombination at any loci:

@math{R(jk \rightarrow i) = ({1 \over 2}) \Pi_I (1 - r_I)}

where @math{r_I} is the probability of recombination between a locus in
genome partition @math{I \subset L}, and a locus in @math{J \subset L}
such that @math{I \cap J = \emptyset}.

If neither parent matches, we first find if we can construct the
offspring genotype from the parents using recombination (by comparing
the differences between the offspring and one parent, then checking the
other parent at all the differing sites).  Only if this test is
successful do we calculate the probability of recombinant offspring.

The function @code{rec_total ()} (found in @file{src/rec.c}) computes
the probability of recombinant offspring by iterating across partitions
of the genome that contain the first locus.  For each partition we
evaluate

@math{R (j_Ij_J, k_Ik_J \rightarrow i_Ii_J)
        = (\delta_{{i_I}{j_I}} \delta_{{i_J}{k_J}}) r_I
          + (\delta_{{i_I}{k_I}} \delta_{{i_J}{j_J}}) r_I}

only if @math{\delta_{{i_I}{j_I}} = \delta_{{i_J}{k_J}} = 1}, where
@math{\delta_{i_I j_J}} is a Kronecker @math{\delta}.  If that's true
then the target offspring can be formed by recombination at the site
defining @math{I} and @math{J}.  The total probability is the sum of
these values:

@math{R(jk \rightarrow i) = \sum_I R (j_Ij_J, k_Ik_J \rightarrow i_Ii_J)}

@node Representation, Simulation functions, Features, Top
@chapter Representation

Haploid represents two kinds of objects: diallelic genotypes (integers),
which can be considered atomic (they can be created and destroyed easily
and there is no need to save them) and compound objects that represent
interactions of genotypes.  Many functions use variable length arrays
internally, hence the GNU99 standard.  All functions documented here are
defined in @file{haploid.h}.

@menu
* Genotypes::                   
* Compound Objects::            
@end menu

@node Genotypes, Compound Objects, Representation, Representation
@section Genotypes
@cindex genotypes, specifying
Haploid represents diallelic genomes with unsigned C integers: a single
locus (position) is represented by a bit of an integer.  An n-locus
genotype therefore has @math{2^n} possible genotypes.  We can therefore
represent all interactions of genotypes (e.g. mating, mutation, etc) as
changes to bits of integers.  The frequency assigned to a particular
locus is the frequency of the set bit (1), and one minus the frequency
of an unset bit.

@cindex genotypes, iterating
This makes iterating over genotypes @strong{very} convenient, as you can
start iterating at 0, and stop before a genotype equals the maximum
number of genotypes.  For a genome with @math{n} loci, you will
therefore iterate over @math{2^n} genotypes.

@menu
* Working with genome size::    
* Manipulating Genotypes::      
* Genotype functions::          
@end menu

@node Working with genome size, Manipulating Genotypes, Genotypes, Genotypes
@subsection  Working with genome size
@cindex genome, size
@cindex genome, example
The simplest way to represent the size of a genome and the number of
alleles is to define global variables or macros to use as array bounds.
Here's an example from @file{tests/tlta.c}:
@example

@verbatim
#define GENO 4			/* GENO */

void
selection (double * freqs, double * W)
{
  /* selection step: Multiply each genotype frequency by its
     respective fitness, then divide by the mean fitness  */

  /* new frequencies after selection step */
  double wbar = gen_mean (freqs, W, GENO);
  /* selection: */
  for (int i = 0; i < GENO; i++)
    /* update freqs with new frequencies */
    freqs[i] = freqs[i] * W[i] / wbar;
}
@end verbatim
@end example


@node Manipulating Genotypes, Genotype functions, Working with genome size, Genotypes
@subsection Manipulating Genotypes
@cindex genotypes, manipulating
@cindex genotypes, iterating
Haploid includes some basic functions that operate on bits of integers:
you may find these functions useful for defining specific loci with
particular phenotypic effects within a large genome.  For example, you
could have a set of loci defined at positions 0--3 of a genotype
(genotypes 0x0--0xf) that code for an additive phenotype, and other
single-locus traits in the same genotype.

@deftypefn {Library Function} _Bool bits_isset (int x, @
           unsigned int pos)

Test if the bit at position @var{pos} is set; if so, return @code{true},
if not return @code{false}.
@end deftypefn

@deftypefn {Library Function} unsigned int bits_extract @
           (unsigned int start, unsigned int end, unsigned int x)
           
Return an unsigned integer extracted from a section of the unsigned
integer @var{x} defined by @var{start} (inclusive) until @var{end}
(exclusive).
@end deftypefn

@deftypefn {Library Function} unsigned int bits_popcount (int x)

Return the number of set bits in @var{x}.  If you compile with GNU
Compiler Collection, this function simply returns the result of
__builtin_popcount (@var{x}) (@pxref{Other Builtins, GCC,, gcc, GNU
Compiler Collection Manual}).
@end deftypefn

@deftypefn {Library Function} unsigned int bits_ffs (unsigned int x)

Return the 1-indexed position of the least significant bit.  In other
words, @code{bits_ffs(2)} returns the integer @math{2}.  This function
is a wrapper for __builtin_ffs () (@pxref{Other Builtins, GCC,, gcc, GNU
Compiler Collection Manual}).  If compiled with GCC, this function
simply returns the result of __builtin_ffs ().
@end deftypefn

@node Genotype functions,  , Manipulating Genotypes, Genotypes
@subsection Genotype functions

@deftypefn {Library Function} void allele_to_genotype @
(double * allele_freqs, double * geno_freqs, size_t nloci, size_t geno)

@code{allele_to_genotype} takes an array of allele frequencies
@var{allele_freqs} and assigns values of random-union-of-gametes
genotype frequencies to @var{geno_freqs}.  The integers @var{nloci} and
@var{geno} serve as array bounds for @var{allele_freqs} and
@var{geno_freqs}, respectively.  The allele frequencies in
@var{allele_freqs} are the frequencies of set bits for the @math{0}
(first) to @math{n-1} (nth) loci of an n-locus genome.  This function
only returns valid results for randomly mating populations, so it is
only useful for certain cases, e.g. producing initial frequencies of
genotypes when it is most convenient to assign to alleles instead of
genotypes.

@example
@verbatim
#define NLOCI 2			/* NLOCI */
#define GENO 4			/* GENO */

double freq[GENO];
double allele[NLOCI];

srand48 (0);
for (j = 0; j < NLOCI; j++)
  allele[j] = drand48 ();

allele_to_genotype (allele, freq, NLOCI, GENO);
@end verbatim
@end example

@end deftypefn

@deftypefn {Library Function} void genotype_to_allele @
(double * allele_freqs, double * geno_freqs, size_t nloci, size_t geno)

@code{genotype_to_allele} takes an array of genotype frequencies
@var{geno_freqs} and uses it to store allele frequencies in
@var{allele_freqs}.  The formal parameters have the same meaning as in
@code{allele_to_genotype}.  @code{genotype_to_allele} is valid in all
contexts.
@end deftypefn

@deftypefn {Library Function} double ld_from_geno@
(size_t nloci, size_t geno, double * geno_freqs)

@code{ld_from_geno} calculates linkage disequilibrium by subtracting
from the value stored at @var{geno_freqs} from the product of the allele
frequencies.  In other words, it is equivalent to
@end deftypefn

@math{f(x) - \Pi_{i=0}^{n} (1 - f(x_i))}

where @math{f(x)} is the frequency of genotype @math{x}, and
@math{f(x_i)} is the frequency of the allele at the @math{i}-th
position.


@node Compound Objects,  , Genotypes, Representation
@section Compound Objects

Compound objects represent interactions of genotypes, especially mating.
The library represents all compound objects as arrays, either single- or
multi-dimensional.  Haploid uses singly-linked lists to represent sparse
matrices (e.g. recombination tables).

The data type @code{rtable_t} is an array of sparse matrices
representing a recombination table.  Sparse matrices are implemented as
singly-linked lists.

@deftp {Data type} rtable_t
An array of @code{sparse_elt_t} entries, one for each offspring genotype.
@end deftp

@deftp {Data type} struct sparse_elt_t indices val next
@verbatim
struct sparse_elt_t
{
  int * indices;		/* row, column */
  double val;			/* the value of the matrix element */
  sparse_elt_t * next;		/* pointer to next */
};
@end verbatim
To explicitly use @code{sparse_elt_t} you must include
@file{src/sparse.h}, which is not installed by default.
@end deftp


@deftp {Data type} haploid_data_t geno nloci rec_table mtable
@verbatim
struct haploid_data_t
{
  int geno;			/* number of genotypes */
  int nloci;			/* number of loci */
  rtable_t ** rec_table;	/* recombination table */
  double ** mtable;		/* mating table (matrix) */
};
@end verbatim
The data type @code{haploid_data_t} can hold most of the information
needed for a simulation.  
@end deftp

@deftypefn {Library Function} rtable_t rec_gen_table @
(int nloci, int geno, double * r)

@code{rec_gen_table} returns a recombination table with entries
corresponding to the probability of producing the @math{k}-th genotype
from mating the @math{i}-th father and the @math{j}-th mother.  In other
words, each sparse matrix pointer in the returned array is a matrix
describing the probability of producing a specific offspring genotype.
@var{r} is a pointer to the recombination map (an array of recombination
probabilities between adjacent sites).  @var{r} should have
@math{@var{nloci} - 1} entries (or the first @math{@var{nloci} - 1}
entries will be used).  The usual C programming caveats apply:
if this array does not contain enough entries, it will probably contain
junk and you will get unexpected results!
@end deftypefn

@deftypefn {Library Function} void rec_mating @
(double * freqs, haploid_data_t * data)

@code{rec_mating} returns a new vector of offspring frequencies from the
data in @var{data}.  @code{rec_mating} calculates the new relative
frequency of offspring @math{k} by finding the Kronecker (``direct'')
product of the mating table and the recombination table for offspring
@math{k}, then summing all the entries of the resultant @math{n \times
n} matrix (where @math{n} is the number of genotypes).  Finally after
all new relative frequencies are found, @code{rec_mating} divides each
new entry by the total sum of the new entries.
@end deftypefn

@deftypefn {Library Function} double ** rmtable (int geno, double * freq)

@code{rmtable} returns a mating table to reflect random mating,
i.e. products of the entries in @var{freq}.  @var{geno} provides the
dimensions of @var{table}.
@end deftypefn


@node Simulation functions, GNU Free Documentation License, Representation, Top
@chapter Simulation functions
Some special functions for managing simulations or doing often-needed
calculations are available.

@deftypefn {Library Function} int sim_stop_ck (double * p1, double * p2, @
int len, long double tol)

@code{sim_stop_ck} compares the values of @var{p1} and @var{p2} by
finding their Euclidean distance @math{d(p1, p2) = (\sum_{i = 0}^n
p_{1i} - p_{2i})^{1 \over 2}}, where @math{n = @var{len}}.  When @math{d
< @var{tol}}, @code{sim_stop_ck} returns 0, otherwise it returns 1.
Calls to @code{sim_stop_ck} are @strong{expensive}: you should only make
one such call per iteration, or find another way to stop your
simulation.

@end deftypefn

@deftypefn {Library Function} double gen_mean (double * props, @
double * vals, int len)

@code{gen_mean} returns the generalized mean @math{\sum_{i = 0}^{n} x
p(x)} given a pointer to proportions @var{props} and a pointer to values
@var{x}.  @var{len} gives array dimensions.

@end deftypefn



@node GNU Free Documentation License, Index, Simulation functions, Top
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@node Index,  , GNU Free Documentation License, Top
@unnumbered Index

@printindex fn
@printindex cp
@printindex tp

@bye
